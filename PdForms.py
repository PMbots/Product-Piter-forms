import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
import logging
from database import (
    create_all_tables, create_connection, save_response_to_db,
    save_user_to_db, save_log, add_reminder, update_reminder,
<<<<<<< HEAD
    deactivate_reminder, delete_user_from_db,
    connect_to_google_sheet, add_data_to_sheet
)

API_TOKEN = '7604176272:AAG-mT7W6mrn_NNjOrcNjmOy8Fc3KHxuoXk'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
=======
    deactivate_reminder, delete_user_from_db
)

TEST_TOKEN = "6511297435:AAF0LWNmaaB3oBpYfWyUKB7n322soW45AmU"
API_TOKEN = '7645108253:AAHIjxssce32bn3DQKbI4tvuiYHvOWoOnco'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TEST_TOKEN)
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
create_all_tables()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø—Ä–æ—Å–∞
class SurveyStates(StatesGroup):
    NAME = State()
    COMPANY = State()
    EXPERIENCE = State()
    OTHER_EXPERIENCE = State()
    INDUSTRY = State()
    OTHER_INDUSTRY = State()
    LOCATION = State()
    POSITION = State()

# –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def reminder_task(telegram_user_id, chat_id):
<<<<<<< HEAD
    asyncio.current_task().set_name(f"reminder_task_{telegram_user_id}")
=======
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    await asyncio.sleep(30 * 60)  # –û–∂–∏–¥–∞–Ω–∏–µ 30 –º–∏–Ω—É—Ç
    conn = create_connection('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT UserID FROM Users WHERE TelegramUserID = ?", (telegram_user_id,))
    user = cursor.fetchone()
    if user:
        user_id = user[0]
<<<<<<< HEAD
        cursor.execute("SELECT IsActive FROM Reminders WHERE UserID = ?", (user_id,))
        reminder = cursor.fetchone()
        if reminder and reminder[0]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
            await bot.send_message(chat_id, "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ–± –æ–ø—Ä–æ—Å–µ! –ù–µ –∑–∞–±—É–¥—å –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –¥–æ –∫–æ–Ω—Ü–∞.")
            save_log(
                user_id=telegram_user_id,
                event="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                timestamp=datetime.now().isoformat()
            )
            update_reminder(user_id, "FirstReminderSent", datetime.now().isoformat())
            asyncio.create_task(delete_user_task(telegram_user_id, chat_id))
=======
        await bot.send_message(chat_id, "–ù–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –æ–ø—Ä–æ—Å–∞! –ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ù–∞—á–∞—Ç—å'.")
        save_log(
            user_id=telegram_user_id,
            event="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            timestamp=datetime.now().isoformat()
        )
        update_reminder(user_id, "FirstReminderSent", datetime.now().isoformat())
        asyncio.create_task(delete_user_task(telegram_user_id, chat_id))
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    conn.close()

# –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def delete_user_task(telegram_user_id, chat_id):
<<<<<<< HEAD
    asyncio.current_task().set_name(f"delete_user_task_{telegram_user_id}")
    await asyncio.sleep(40 * 60)  # –û–∂–∏–¥–∞–Ω–∏–µ 40 –º–∏–Ω—É—Ç
    delete_user_from_db(telegram_user_id)

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await bot.send_message(chat_id, "–ú—ã —É–¥–∞–ª–∏–ª–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É —Å–Ω–æ–≤–∞, –Ω–∞–ø–∏—à–∏ /start.")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–∞
=======
    await asyncio.sleep(40 * 60)  # –û–∂–∏–¥–∞–Ω–∏–µ 40 –º–∏–Ω—É—Ç
    delete_user_from_db(telegram_user_id)
    await bot.send_message(chat_id, "–ú—ã —É–¥–∞–ª–∏–ª–∏ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.")
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    save_log(
        user_id=telegram_user_id,
        event="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
        timestamp=datetime.now().isoformat()
    )
<<<<<<< HEAD

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = dp.current_state(chat=chat_id, user=telegram_user_id)
    await state.finish()  # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
=======
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    conn = create_connection('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT UserID FROM Users WHERE TelegramUserID = ?", (telegram_user_id,))
    user = cursor.fetchone()
    if user:
        user_id = user[0]
        deactivate_reminder(user_id)
    conn.close()

<<<<<<< HEAD
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–¥–∞—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def cancel_reminder_tasks(telegram_user_id):
    """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∏—Ö –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    # –û—Ç–º–µ–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è
    for task in asyncio.all_tasks():
        if task.get_name() in {f"reminder_task_{telegram_user_id}", f"delete_user_task_{telegram_user_id}"}:
            task.cancel()

    # –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = create_connection('bot_database.db')
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT UserID FROM Users WHERE TelegramUserID = ?", (telegram_user_id,))
        user = cursor.fetchone()
        if user:
            user_id = user[0]
            deactivate_reminder(user_id)  # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            save_log(
                user_id=telegram_user_id,
                event="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞",
                timestamp=datetime.now().isoformat()
            )
    finally:
        conn.close()

@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
=======
# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å"))
    save_user_to_db(
        telegram_user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name
    )
    save_log(
        user_id=message.from_user.id,
        event="–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
        timestamp=datetime.now().isoformat()
    )
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    conn = create_connection('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT UserID FROM Users WHERE TelegramUserID = ?", (message.from_user.id,))
    user = cursor.fetchone()
<<<<<<< HEAD
    conn.close()

    if user:
        await message.answer("–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–ø—Ä–æ—Å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!")
    else:
        markup = ReplyKeyboardMarkup(resize_keyboard=True)
        markup.add(KeyboardButton("–ù–∞—á–∞—Ç—å"))
        save_user_to_db(
            telegram_user_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name
        )
        save_log(
            user_id=message.from_user.id,
            event="–ö–æ–º–∞–Ω–¥–∞ /start –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
            timestamp=datetime.now().isoformat()
        )
        conn = create_connection('bot_database.db')
        cursor = conn.cursor()
        cursor.execute("SELECT UserID FROM Users WHERE TelegramUserID = ?", (message.from_user.id,))
        user = cursor.fetchone()
        if user:
            user_id = user[0]
            add_reminder(user_id)
        conn.close()
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ç–≤–æ–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –ü—Ä–æ–¥–∞–∫—Ç—ã –°–ü–ë. –ù–µ–¥–∞–≤–Ω–æ —É –Ω–∞—Å –≤—ã—à–µ–ª –ø–æ—Å—Ç –æ–±–æ –º–Ω–µ üòâ.\n"
            "–Ø —Ç—É—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–±—è –ø–æ–±–ª–∏–∂–µ –∏ –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å —Ü–µ–ª–µ–≤–æ–π –Ω–µ—Ç–≤–æ—Ä–∫. –ö–æ–≥–¥–∞ —Ç—ã –∑–∞–ø–æ–ª–Ω–∏—â—å –∞–Ω–∫–µ—Ç—É, –º—ã –¥–æ–±–∞–≤–∏–º —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å "
            "–≤ –±–∞–∑—É IT Unity, –≥–¥–µ —Å–º–æ–∂–µ—à—å –Ω–∞–π—Ç–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –¥–ª—è —Å–≤–æ–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤, –Ω—É–∂–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –∏ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ. –ß–µ–º –ª—É—á—à–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –∞–Ω–∫–µ—Ç–∞, "
            "—Ç–µ–º –ø—Ä–æ—â–µ –Ω—É–∂–Ω—ã–º –ª—é–¥—è–º —Ç–µ–±—è –Ω–∞–π—Ç–∏!\n\n"
            "–ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ–π –∞–Ω–∫–µ—Ç—ã:\n"
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? - –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞\n"
            "–ì–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? - –Ø–Ω–¥–µ–∫—Å\n"
            "–û–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ: - 3-5 –ª–µ—Ç\n"
            "–°—Ñ–µ—Ä–∞: - FinTech, IT\n"
            "–ì–æ—Ä–æ–¥: - –ú–æ—Å–∫–≤–∞\n"
            "–ö–∞–∫ –º–æ–≥—É –ø–æ–º–æ—á–∏: - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç—Ä–∏–∫, —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π.\n"
            "–ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.üöÄ",
            reply_markup=markup
        )
        asyncio.create_task(reminder_task(message.from_user.id, message.chat.id))

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å")
async def start_survey(message: types.Message, state: FSMContext):
    conn = create_connection('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT UserID FROM Users WHERE TelegramUserID = ?", (message.from_user.id,))
    user = cursor.fetchone()
    conn.close()

    await state.finish()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
=======
    if user:
        user_id = user[0]
        add_reminder(user_id)
    conn.close()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç —Ç–≤–æ–µ–≥–æ –∫–æ–º—å—é–Ω–∏—Ç–∏ –ü—Ä–æ–¥–∞–∫—Ç—ã –°–ü–ë. –ù–∞–∂–º–∏ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å.",
        reply_markup=markup
    )
    asyncio.create_task(reminder_task(message.from_user.id, message.chat.id))

@dp.message_handler(lambda message: message.text == "–ù–∞—á–∞—Ç—å")
async def start_survey(message: types.Message):
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    save_log(
        user_id=message.from_user.id,
        event="–û–ø—Ä–æ—Å –Ω–∞—á–∞—Ç",
        timestamp=datetime.now().isoformat()
    )
    conn = create_connection('bot_database.db')
    cursor = conn.cursor()
    cursor.execute("SELECT UserID FROM Users WHERE TelegramUserID = ?", (message.from_user.id,))
<<<<<<< HEAD
=======
    user = cursor.fetchone()
    if user:
        user_id = user[0]
        deactivate_reminder(user_id)
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    conn.close()
    await message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–º—è –∏ –§–∞–º–∏–ª–∏—è.", reply_markup=ReplyKeyboardRemove())
    await SurveyStates.NAME.set()

@dp.message_handler(state=SurveyStates.NAME)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    save_response_to_db(
        telegram_user_id=message.from_user.id,
        question="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        answer=message.text
    )
    save_log(
        user_id=message.from_user.id,
        event="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?",
        timestamp=datetime.now().isoformat()
    )
<<<<<<< HEAD
    await message.answer("–ì–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.", reply_markup=ReplyKeyboardRemove())
=======
    await message.answer("–ì–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏.")
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    await SurveyStates.COMPANY.set()

@dp.message_handler(state=SurveyStates.COMPANY)
async def get_company(message: types.Message, state: FSMContext):
    await state.update_data(company=message.text)
    save_response_to_db(
        telegram_user_id=message.from_user.id,
        question="–ì–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?",
        answer=message.text
    )
    save_log(
        user_id=message.from_user.id,
        event="–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: –ì–¥–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?",
        timestamp=datetime.now().isoformat()
    )
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ú–µ–Ω–µ–µ 1 –≥–æ–¥–∞", "1-3 –≥–æ–¥–∞", "3-5 –ª–µ—Ç", "–ë–æ–ª–µ–µ 5 –ª–µ—Ç", "–î—Ä—É–≥–æ–µ")
    await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ?", reply_markup=markup)
    await SurveyStates.EXPERIENCE.set()

@dp.message_handler(state=SurveyStates.EXPERIENCE)
async def get_experience(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–æ–µ":
        save_response_to_db(
            telegram_user_id=message.from_user.id,
            question="–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ?",
            answer=message.text,
            is_other_option=True
        )
        save_log(
            user_id=message.from_user.id,
            event="–û—Ç–≤–µ—Ç: –î—Ä—É–≥–æ–µ –≤ –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã",
            timestamp=datetime.now().isoformat()
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=ReplyKeyboardRemove())
        await SurveyStates.OTHER_EXPERIENCE.set()
    else:
<<<<<<< HEAD
        await state.update_data(experience=message.text)
=======
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
        save_response_to_db(
            telegram_user_id=message.from_user.id,
            question="–ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ –ø—Ä–æ–¥–∞–∫—Ç-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ?",
            answer=message.text
        )
        save_log(
            user_id=message.from_user.id,
            event=f"–û—Ç–≤–µ—Ç –Ω–∞ –æ–ø—ã—Ç: {message.text}",
            timestamp=datetime.now().isoformat()
        )
        await ask_industry(message, state)

@dp.message_handler(state=SurveyStates.OTHER_EXPERIENCE)
async def get_other_experience(message: types.Message, state: FSMContext):
    await state.update_data(experience=message.text)
    save_response_to_db(
        telegram_user_id=message.from_user.id,
        question="–£–∫–∞–∂–∏ —Å–≤–æ–π –æ–ø—ã—Ç —Ç–µ–∫—Å—Ç–æ–º.",
        answer=message.text
    )
    save_log(
        user_id=message.from_user.id,
        event=f"–û—Ç–≤–µ—Ç –Ω–∞ '–î—Ä—É–≥–æ–π –æ–ø—ã—Ç': {message.text}",
        timestamp=datetime.now().isoformat()
    )
    await ask_industry(message, state)

async def ask_industry(message: types.Message, state: FSMContext):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("IT/Tech", "FinTech", "eCommerce", "–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ì–µ–π–º–¥–µ–≤", "–î—Ä—É–≥–æ–µ")
    await message.answer("–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?", reply_markup=markup)
    await SurveyStates.INDUSTRY.set()

@dp.message_handler(state=SurveyStates.INDUSTRY)
async def get_industry(message: types.Message, state: FSMContext):
    if message.text == "–î—Ä—É–≥–æ–µ":
        save_response_to_db(
            telegram_user_id=message.from_user.id,
            question="–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?",
            answer=message.text,
            is_other_option=True
        )
        save_log(
            user_id=message.from_user.id,
            event="–û—Ç–≤–µ—Ç: –î—Ä—É–≥–∞—è —Å—Ñ–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã",
            timestamp=datetime.now().isoformat()
        )
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Å—Ñ–µ—Ä—É —Ä–∞–±–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.", reply_markup=ReplyKeyboardRemove())
        await SurveyStates.OTHER_INDUSTRY.set()
    else:
<<<<<<< HEAD
        await state.update_data(industry=message.text)
=======
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
        save_response_to_db(
            telegram_user_id=message.from_user.id,
            question="–í –∫–∞–∫–æ–π —Å—Ñ–µ—Ä–µ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?",
            answer=message.text
        )
        save_log(
            user_id=message.from_user.id,
            event=f"–û—Ç–≤–µ—Ç –Ω–∞ —Å—Ñ–µ—Ä—É —Ä–∞–±–æ—Ç—ã: {message.text}",
            timestamp=datetime.now().isoformat()
        )
        await ask_location(message, state)

@dp.message_handler(state=SurveyStates.OTHER_INDUSTRY)
async def get_other_industry(message: types.Message, state: FSMContext):
    await state.update_data(industry=message.text)
    save_response_to_db(
        telegram_user_id=message.from_user.id,
        question="–£–∫–∞–∂–∏ —Å—Ñ–µ—Ä—É —Ä–∞–±–æ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º.",
        answer=message.text
    )
    save_log(
        user_id=message.from_user.id,
        event=f"–û—Ç–≤–µ—Ç: –î—Ä—É–≥–∞—è —Å—Ñ–µ—Ä–∞ —Ä–∞–±–æ—Ç—ã - {message.text}",
        timestamp=datetime.now().isoformat()
    )
    await ask_location(message, state)

async def ask_location(message: types.Message, state: FSMContext):
<<<<<<< HEAD
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?", reply_markup=ReplyKeyboardRemove())
=======
    await message.answer("–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?", reply_markup=ReplyKeyboardRemove())
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
    await SurveyStates.LOCATION.set()

@dp.message_handler(state=SurveyStates.LOCATION)
async def get_location(message: types.Message, state: FSMContext):
    await state.update_data(location=message.text)
    save_response_to_db(
        telegram_user_id=message.from_user.id,
<<<<<<< HEAD
        question="–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?",
=======
        question="–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –∏ –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?",
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
        answer=message.text
    )
    save_log(
        user_id=message.from_user.id,
        event=f"–û—Ç–≤–µ—Ç –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {message.text}",
        timestamp=datetime.now().isoformat()
    )
    await message.answer(
<<<<<<< HEAD
        "–í —á—ë–º —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã? –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∏–ª–∏ –±–∏–∑–Ω–µ—Å—É, –∏ –≤ –∫–∞–∫–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö —Å —Ç–æ–±–æ–π –º–æ–∂–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å?\n"
        "(–ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–µ—à—å –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –ø–æ–º–æ—á—å —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –ø—Ä–æ—Ü–µ—Å—Å–æ–≤, A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º, —É–ª—É—á—à–µ–Ω–∏–µ–º –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏, "
        "–†–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –∏–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã –∫–æ–º–∞–Ω–¥—ã)",
=======
        "–ù–∞ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å? –ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ—é –æ—Å–Ω–æ–≤–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å? "
        "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è, —á—Ç–æ —Å–æ–∑–¥–∞–µ—à—å, –∑–∞ –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç–≤–µ—á–∞–µ—à—å?",
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
        reply_markup=ReplyKeyboardRemove()
    )
    await SurveyStates.POSITION.set()

@dp.message_handler(state=SurveyStates.POSITION)
async def get_position(message: types.Message, state: FSMContext):
<<<<<<< HEAD
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞."""
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    await state.update_data(position=message.text)

    try:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        save_response_to_db(
            telegram_user_id=message.from_user.id,
            question="–ù–∞ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?",
            answer=message.text
        )

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        save_log(
            user_id=message.from_user.id,
            event=f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {message.text}",
            timestamp=datetime.now().isoformat()
        )

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Google –¢–∞–±–ª–∏—Ü—É
        data = await state.get_data()
        data['username'] = message.from_user.username
        data['tgid'] = message.from_user.id

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google –¢–∞–±–ª–∏—Ü—ã
        add_data_to_sheet(sheet_name="–û–ø—Ä–æ—Å—ã", data=data)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        await message.answer(
            "–ö–ª–∞—Å—Å! üéâ –¢–≤–æ—è –∞–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ IT Unity.\n"
            "–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Ü–µ–ª–µ–≤–æ–º—É –Ω–µ—Ç–≤–æ—Ä–∫—É, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏–ª–∏ —Å–∞–º–æ–º—É –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º.\n"
            "–¢—ã –º–æ–∂–µ—à—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–µ—Ç–≤–æ—Ä–∫!",
            reply_markup=ReplyKeyboardRemove()
        )
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

    # –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    cancel_reminder_tasks(message.from_user.id)

    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.finish()


if __name__ == '__main__':
    connect_to_google_sheet()
    executor.start_polling(dp, skip_updates=True)
=======
    await state.update_data(position=message.text)
    save_response_to_db(
        telegram_user_id=message.from_user.id,
        question="–ù–∞ –∫–∞–∫–æ–π –ø–æ–∑–∏—Ü–∏–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å?",
        answer=message.text
    )
    save_log(
        user_id=message.from_user.id,
        event=f"–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {message.text}",
        timestamp=datetime.now().isoformat()
    )
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –æ–ø—Ä–æ—Å–µ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è.")
    logging.info(f"–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {await state.get_data()}")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
>>>>>>> 2df79fc03709b7472b04f1e4d68b409475a4e822
